//
// Created by marijn on 9/16/24.
//

#ifndef STM32F412_USART_H
#define STM32F412_USART_H
#include "periph.h"
#include "GPIO.h"
#include "sys.h"


/*!<
 * types
 * */
typedef enum {
	USART_PIN_DISABLE =	0x00000000,
	// USART1
	USART1_CK_A8 =		0x78000041, USART1_TX_A9 =		0x79000041,
	USART1_RX_A10 =		0x7A000041, USART1_CTS_A11 =	0x7B000041,
	USART1_RTS_A12 =	0x7C000041, USART1_TX_A15 =		0x7F000041,
	USART1_RX_B3 =		0x73100041, USART1_TX_B6 =		0x76100041,
	USART1_RX_B7 =		0x77100041,
	// USART2
	USART2_CTS_A0 =		0x70000110, USART2_RTS_A1 =		0x71000110,
	USART2_TX_A2 =		0x72000110, USART2_RX_A3 =		0x73000110,
	USART2_CK_A4 =		0x74000110, USART2_CTS_D3 =		0x73300110,
	USART2_RTS_D4 =		0x74300110, USART2_TX_D5 =		0x75300110,
	USART2_RX_D6 =		0x76300110, USART2_CK_D7 =		0x77300110,
	// USART3
	USART3_TX_B10 =		0x7A100120, USART3_RX_B11 =		0x7B100120,
	USART3_CK_B12 =		0x8C100120, USART3_CTS_B13 =	0x8D100120,
	USART3_RTS_B14 =	0x7E100120, USART3_RX_C5 =		0x75200120,
	USART3_TX_C10 =		0x7A200120, USART3_RX_C11 =		0x7B200120,
	USART3_CK_C12 =		0x7C200120, USART3_TX_D8 =		0x78300120,
	USART3_RX_D9 =		0x79300120, USART3_CK_D10 =		0x7A300120,
	USART3_CTS_D11 =	0x7B300120, USART3_RTS_D12 =	0x7C300120,
	// USART6
	USART6_TX_A11 =		0x8B000051, USART6_RX_A12 =		0x8C000051,
	USART6_TX_C6 =		0x86200051, USART6_RX_C7 =		0x87200051,
	USART6_CK_C8 =		0x88200051, USART6_CK_G7 =		0x87600051,
	USART6_RTS_G8 =		0x88600051, USART6_RX_G9 =		0x89600051,
	USART6_RTS_G12 =	0x8C600051, USART6_CTS_G13 =	0x8D600051,
	USART6_TX_G14 =		0x8E600051, USART6_CTS_G15 =	0x8F600051
} USART_GPIO_t;

typedef enum {
	USART_OVERSAMPLING_16 =	0,
	USART_OVERSAMPLING_8 =	1,
} USART_OS_t;


/*!< init / enable / disable */
void enable_USART(USART_t* usart);
void disable_USART(USART_t* usart);
void reset_USART(USART_t* usart);
// UART mode
void fconfig_UART(USART_GPIO_t tx, USART_GPIO_t rx, uint32_t baud, USART_OS_t oversampling);
void config_UART(USART_GPIO_t tx, USART_GPIO_t rx, uint32_t baud);
// IRQ
// TODO
/*!< input / output */
uint32_t USART_write(USART_t* usart, const uint8_t* buffer, uint32_t size, uint32_t timeout);
uint32_t USART_read(USART_t* usart, uint8_t* buffer, uint32_t size, uint32_t timeout);
uint8_t USART_print(USART_t* usart, char* str, uint32_t timeout);


#endif //STM32F412_USART_H
